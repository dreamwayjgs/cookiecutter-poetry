[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "0.0.1"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
repository = "https://github.com/{{cookiecutter.author_github_handle}}/{{cookiecutter.project_name}}"
documentation = "https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/"
readme = "README.md"
packages = [{ include = "{{cookiecutter.project_slug}}", from = 'src' }]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

[tool.poetry.group.dev.dependencies]

{% if cookiecutter.codecov == 'y' -%}

{% endif -%}
{% if cookiecutter.deptry == 'y' -%}

{% endif -%}
{% if cookiecutter.typechecking == 'mypy' -%}

{% endif -%}
{% if cookiecutter.typechecking == 'pyright' -%}

{% endif -%}


{% if cookiecutter.mkdocs == 'y' -%}
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
deptry = "^0.16.2"
mypy = "^1.5.1"
pyright = "^1.1.382"
pre-commit = "^3.4.0"
tox = "^4.11.1"
[tool.poetry.group.docs.dependencies]

{%- endif %}

mkdocs = "^1.4.2"
mkdocs-material = "^9.2.7"
mkdocstrings = { extras = ["python"], version = "^0.26.1" }
[build-system]


{% if cookiecutter.typechecking == 'mypy' -%}
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
[tool.mypy]

{%- endif %}

{% if cookiecutter.typechecking == 'pyright' -%}
files = ["{{cookiecutter.project_slug}}"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
[tool.pyright]

{%- endif %}

include = ["{{cookiecutter.project_slug}}"]
typeCheckingMode = "strict"
venvPath = "."
venv = ".venv"
[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ['src']

[tool.ruff]
target-version = "py310"
line-length = 120
fix = true
select = [
  # flake8-2020
  "YTT",
  # flake8-bandit
  "S",
  # flake8-bugbear
  "B",
  # flake8-builtins
  "A",
  # flake8-comprehensions
  "C4",
  # flake8-debugger
  "T10",
  # flake8-simplify
  "SIM",
  # isort
  "I",
  # mccabe
  "C90",
  # pycodestyle
  "E",
  "W",
  # pyflakes
  "F",
  # pygrep-hooks
  "PGH",
  # pyupgrade
  "UP",
  # ruff
  "RUF",
  # tryceratops
  "TRY",
]
ignore = [
  # LineTooLong
  "E501",
  # DoNotAssignLambda
  "E731",
]

[tool.ruff.format]


{% if cookiecutter.codecov == "y"-%}
preview = true
[tool.coverage.report]
skip_empty = true

[tool.coverage.run]

{% endif%}

branch = true
source = ["{{cookiecutter.project_slug}}"]
[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]
